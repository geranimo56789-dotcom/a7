name: iOS Build (Flutter)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      export_method:
        description: 'Export method: app-store, ad-hoc, development, enterprise'
        required: true
        default: 'app-store'
      build_mode:
        description: 'Build mode: release or debug'
        required: true
        default: 'release'

jobs:
  build-ios:
    runs-on: macos-14
    env:
      FLUTTER_VERSION: 'stable'
  IOS_EXPORT_METHOD: "${{ github.event.inputs.export_method || 'app-store' }}"
  BUILD_MODE: "${{ github.event.inputs.build_mode || 'release' }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Fetch dependencies
        run: flutter pub get

      - name: Create iOS and other platforms if missing
        run: |
          if [ ! -d ios ]; then flutter create .; fi

      - name: Pre-build iOS (no codesign)
        env:
          CI: true
        run: |
          # Generate iOS workspace and fetch pods without requiring signing
          flutter build ios --no-codesign --${{ env.BUILD_MODE }}

      - name: Decode signing assets and sign (optional)
        if: ${{ secrets.APPLE_CERT_P12 && secrets.APPLE_CERT_PASSWORD && secrets.PROVISIONING_PROFILE_BASE64 && vars.IOS_BUNDLE_ID && secrets.APPLE_TEAM_ID }}
        env:
          P12_BASE64: ${{ secrets.APPLE_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          PP_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ vars.IOS_BUNDLE_ID }}
          EXPORT_METHOD: ${{ env.IOS_EXPORT_METHOD }}
        run: |
          set -euo pipefail
          mkdir -p ~/certs ~/profiles ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$P12_BASE64" | base64 --decode > ~/certs/dist.p12
          echo "$PP_BASE64" | base64 --decode > ~/profiles/profile.mobileprovision

          # Create and use a temporary keychain
          security create-keychain -p temp build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temp build.keychain
          security import ~/certs/dist.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k temp build.keychain

          # Install provisioning profile
          PROFILE_UUID=$(security cms -D -i ~/profiles/profile.mobileprovision | /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin)
          cp ~/profiles/profile.mobileprovision "~/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          # Archive with manual codesigning
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            DEVELOPMENT_TEAM=$TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID \
            archive | xcpretty && exit ${PIPESTATUS[0]}

          # Export signed IPA
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>$EXPORT_METHOD</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key>
              <string>$PROFILE_UUID</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ios/ipa | xcpretty && exit ${PIPESTATUS[0]}

      - name: Build artifact path summary
        run: |
          echo "Listing build outputs:" 
          ls -R build/ios || true

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ env.BUILD_MODE }}
          path: |
            build/ios/ipa/*.ipa
            build/ios/iphoneos/*.app
            build/ios/archive/*.xcarchive
          if-no-files-found: warn

